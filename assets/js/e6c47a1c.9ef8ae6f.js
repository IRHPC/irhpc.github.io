"use strict";(self.webpackChunkhpcdocs=self.webpackChunkhpcdocs||[]).push([[630],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>m});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},p="mdxType",_={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(t),d=i,m=p["".concat(s,".").concat(d)]||p[d]||_[d]||r;return t?a.createElement(m,o(o({ref:n},c),{},{components:t})):a.createElement(m,o({ref:n},c))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var u=2;u<r;u++)o[u]=t[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4349:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>_,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var a=t(7462),i=(t(7294),t(3905));const r={slug:"singularity"},o="Singularity",l={unversionedId:"software/singularity",id:"software/singularity",title:"Singularity",description:"Some software will work better in other environments for example AlphaFold",source:"@site/docs/software/04_singularity.md",sourceDirName:"software",slug:"/software/singularity",permalink:"/docs/software/singularity",draft:!1,editUrl:"https://github.com/irhpc/irhpc.github.io/edit/main/docs/software/04_singularity.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{slug:"singularity"},sidebar:"tutorialSidebar",previous:{title:"Conda, Python, R & Go",permalink:"/docs/software/rcondapython"},next:{title:"MatLab",permalink:"/docs/software/matlab"}},s={},u=[{value:"What is Singularity?",id:"what-is-singularity",level:2},{value:"Singularity basic usage",id:"singularity-basic-usage",level:2},{value:"Getting images",id:"getting-images",level:3},{value:"Interact with images",id:"interact-with-images",level:3},{value:"Executing commands",id:"executing-commands",level:3},{value:"Running a container",id:"running-a-container",level:3},{value:"Working with files",id:"working-with-files",level:2},{value:"Building custom images",id:"building-custom-images",level:2},{value:"Moving containers to Elja",id:"moving-containers-to-elja",level:4},{value:"Running singularity with SLURM",id:"running-singularity-with-slurm",level:2},{value:"GPU example",id:"gpu-example",level:3},{value:"Singularity containers as SLURM jobs",id:"singularity-containers-as-slurm-jobs",level:3}],c={toc:u},p="wrapper";function _(e){let{components:n,...t}=e;return(0,i.kt)(p,(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"singularity"},"Singularity"),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Some software will work better in other environments for example ",(0,i.kt)("a",{parentName:"p",href:"/docs/software/AlphaFold"},"AlphaFold"))),(0,i.kt)("h2",{id:"what-is-singularity"},"What is Singularity?"),(0,i.kt)("p",null,"Singularity is a container platform, similar to Docker. It allows our users to create and run containers in a way that all the software pieces of the package can be reproduced.\nUsers can build a container on their local computer and then run it on Elja or pull existing images from the ",(0,i.kt)("a",{parentName:"p",href:"https://cloud.sylabs.io/library"},"Singularity Library")," or ",(0,i.kt)("a",{parentName:"p",href:"https://hub.docker.com"},"Docker Hub")),(0,i.kt)("h2",{id:"singularity-basic-usage"},"Singularity basic usage"),(0,i.kt)("p",null,"Singularity offers a docker like container system.\nTo use singularity on ",(0,i.kt)("strong",{parentName:"p"},"Elja")," you must first start an interactive session:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'$ srun --job-name "Singularity Job" --partition 48cpu_192mem --time 01:00:00 --pty bash \n')),(0,i.kt)("p",null,"To learn more about interactive sessions see ",(0,i.kt)("a",{parentName:"p",href:"/docs/elja/interactive_session"},"here"),"."),(0,i.kt)("h3",{id:"getting-images"},"Getting images"),(0,i.kt)("p",null,"Once you are in an interactive session you can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"singularity")," command:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ singularity --version\nsingularity-ce version 3.11.4-1.el8\n")),(0,i.kt)("p",null,"There are both native Singularity images, those are provided on Singularities Container Library, ",(0,i.kt)("inlineCode",{parentName:"p"},"pull")," simply downloads the image file to your system."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ singularity pull library://sylabsed/linux/alpine\n")),(0,i.kt)("p",null,"You can also ",(0,i.kt)("inlineCode",{parentName:"p"},"pull")," docker images, from the ",(0,i.kt)("a",{parentName:"p",href:"https://hub.docker.com/"},"Docker Hub")," in that case ",(0,i.kt)("inlineCode",{parentName:"p"},"pull")," downloads the image file from docker and combines them in layers which are combined into a usabale Singularity file"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ singularity pull docker://godlovedc/lolcow\n")),(0,i.kt)("p",null,"Pulling docker images reduces reproducibility. If you were to pull a docker image today and then wait six months and pull again, your are not guaranteed to get the same image. If any of the source layers has changed the image will be altered. If reproducibility is a priority for you, try building your images from the Container Library."),(0,i.kt)("p",null,"You can also use the ",(0,i.kt)("inlineCode",{parentName:"p"},"build")," command to domwnload pre-built images from an external resource. When using build you must specify a name for your container like so:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ singularity build ubuntu.sif library://ubuntu\n\n$ singularity build lolcow.sif docker://godlovedc/lolcow\n")),(0,i.kt)("p",null,"unlike ",(0,i.kt)("inlineCode",{parentName:"p"},"pull"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"build")," will convert your image to the latest Singularity image format after downloading it."),(0,i.kt)("h3",{id:"interact-with-images"},"Interact with images"),(0,i.kt)("p",null,"You can use the ",(0,i.kt)("inlineCode",{parentName:"p"},"search")," command to locate groups, collections, and containers of interest on the ",(0,i.kt)("a",{parentName:"p",href:"https://cloud.sylabs.io/library"},"Container Library"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'$ singularity search metaerg\nFound 1 container images for amd64 matching "metaerg":\n\n        library://rbazile/default/metaerg:1.0.4,amd64,latest\n')),(0,i.kt)("p",null,"To run the container you can either run it in interactive mode or execute commands on it"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ singularity shell lolcow_latest.sif\nSingularity> cowsay This is from a shell\n ______________________\n< This is from a shell >\n ----------------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n\n")),(0,i.kt)("p",null,"Shell also works with the ",(0,i.kt)("inlineCode",{parentName:"p"},"library://"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"docker://")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"shub://")," URI's.  This creates a temporary container that dissapears when the shell is exited"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"singularity shell library://sylabsed/examples/lolcow\nINFO:    Using cached image\nSingularity> cowsay This container will self destruct when it is exited\n ________________________________________\n/ This container will self destruct when \\\n\\ it is exited                           /\n ----------------------------------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n")),(0,i.kt)("h3",{id:"executing-commands"},"Executing commands"),(0,i.kt)("p",null,"The exec commands allows you to execute a custom command within the container by specifing the ",(0,i.kt)("inlineCode",{parentName:"p"},".sif")," file. For instance:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"}," singularity exec lolcow_latest.sif cowsay i am cat\n __________\n< i am cat >\n ----------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"exec")," also works with the ",(0,i.kt)("inlineCode",{parentName:"p"},"library://"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"docker://")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"shub://")," URIs. THis creates a temporary container that executes a command and destructs."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'singularity exec library://sylabsed/examples/lolcow cowsay "THIS CONTAINER WILL BE DESTROYED"\nINFO:    Using cached image\n __________________________________\n< THIS CONTAINER WILL BE DESTROYED >\n ----------------------------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n')),(0,i.kt)("h3",{id:"running-a-container"},"Running a container"),(0,i.kt)("p",null,"Singularity containers contain ",(0,i.kt)("a",{parentName:"p",href:"https://docs.sylabs.io/guides/3.0/user-guide/definition_files.html#runscript"},"runscripts"),". These are user defined scripts that define the actions a container should perform when somone runs it. This can be triggered with the run command, or by calling the container as though it were an executable."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'$ singularity run lolcow_latest.sif\n _____________________________________\n/ You have been selected for a secret \\\n\\ mission.                            /\n -------------------------------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n\n$ ./lolcow_latest.sif\n ____________________________________\n/ Q: What is orange and goes "click, \\\n\\ click?" A: A ball point carrot.    /\n ------------------------------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"run")," also works with the ",(0,i.kt)("inlineCode",{parentName:"p"},"library://")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"docker://")," URIs. This creates a temporary container that destructs when it finishes."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"singularity run library://sylabsed/examples/lolcow\nINFO:    Using cached image\n ______________________________________\n/ April 1                              \\\n|                                      |\n| This is the day upon which we are    |\n| reminded of what we are on the other |\n| three hundred and sixty-four.        |\n|                                      |\n| -- Mark Twain, \"Pudd'nhead Wilson's  |\n\\ Calendar\"                            /\n --------------------------------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n")),(0,i.kt)("h2",{id:"working-with-files"},"Working with files"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'$ echo "Hello from inside the container" > $HOME/hostfile.txt\n\n$ singularity exec lolcow_latest.sif cat $HOME/hostfile.txt\n\nHello from inside the container\n')),(0,i.kt)("p",null,"This works because ",(0,i.kt)("inlineCode",{parentName:"p"},"hostfile.txt")," exists in the user's home directory. Singularity mounts ",(0,i.kt)("inlineCode",{parentName:"p"},"/home/$USER"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"/tmp")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"$PWD")," into your container at runtime."),(0,i.kt)("p",null,"You can specify additinoal directories to bind mount into your container with the --bind option for example ",(0,i.kt)("inlineCode",{parentName:"p"},"/scratch/$USER/data")," "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'$ echo "Do science!" > /scratch/$USER/data/text.txt\n$ singularity exec --bind /scratch/$USER/data:/mnt lolcow_latest.sif cat /mnt/text.text\nDo science!\n')),(0,i.kt)("p",null,"In this case the ",(0,i.kt)("inlineCode",{parentName:"p"},"/scratch/$USER/data")," directori is bind mounted to ",(0,i.kt)("inlineCode",{parentName:"p"},"/mnt")," inside the container."),(0,i.kt)("p",null,"Pipes and redirects also work with Singularity commands just like they do with normal Linux commands:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"cat /scratch/$USER/data/text.txt | singularity exec lolcow_latest.sif cowsay\n _____________\n< Do science! >\n -------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n\n")),(0,i.kt)("h2",{id:"building-custom-images"},"Building custom images"),(0,i.kt)("p",null,"In this section, we will go over on how you can build a brand new custom container."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Building containers requires ",(0,i.kt)("strong",{parentName:"p"},"sudo")," privileges and therefore you cannot run it on ",(0,i.kt)("strong",{parentName:"p"},"Elja"),".\nIt is recommended to build the containers on your local machine and copy them over to ",(0,i.kt)("strong",{parentName:"p"},"Elja"))),(0,i.kt)("p",null,"To build a singularity container, you must first download ",(0,i.kt)("strong",{parentName:"p"},"Singularity")," on to your local machine since some of the commands require sudo privileges, and then use the build command.\n",(0,i.kt)("strong",{parentName:"p"},"Singularity")," is available for Windows, MacOS and Linux, more information can be found ",(0,i.kt)("a",{parentName:"p",href:"https://docs.sylabs.io/guides/3.0/user-guide/installation.html"},"here")),(0,i.kt)("p",null,"We will begin by creating a writable container, also known as a sandbox, and shell into that contaiver with the ",(0,i.kt)("inlineCode",{parentName:"p"},"--writable")," option and tinker with it interactively.\nWe will then add our changes to our definition(",(0,i.kt)("em",{parentName:"p"},".def"),") file and use that to rebuild the container. "),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ mkdir lolcow\n$ cd lolcow\n$ touch lolcow.def\n$ vim lolcow.def\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("em",{parentName:"p"},".def")," file should contain the following lines:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'BootStrap: debootstrap\nOSVersion: stable\nMirrorURL: http://ftp.us.debian.org/debian/\n\n%runscript\n    echo "This is what happens when you run the container..."\n\n%post\n    echo "Hello from inside the container"\n    apt-get -y --allow-unauthenticated install vim\n')),(0,i.kt)("p",null,"Using this definition file as as starting point, we can start to build our lolcow.img container. The build command requires ",(0,i.kt)("inlineCode",{parentName:"p"},"sudo")," privileges."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo singularity build --sandbox lolcow lolcow.def\n")),(0,i.kt)("p",null,"Singularity will build a container called ",(0,i.kt)("em",{parentName:"p"},"lolcow")," from the ",(0,i.kt)("em",{parentName:"p"},"lolcow.def")," definition file. The ",(0,i.kt)("inlineCode",{parentName:"p"},"--sandbox")," option tells Singularity that wewant to build a special type of container, called a sandbox, for development purposes."),(0,i.kt)("p",null,"Next we will use the ",(0,i.kt)("inlineCode",{parentName:"p"},"shell --writable")," option to modify our container."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo singularity shell --writable lolcow\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"--writable")," option will allow us to modify the container. The changes will be saved into the contain and presist across uses."),(0,i.kt)("p",null,"Now lets install some software."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"Singularity> apt-get update\n\nSingularity> apt-get install -y fortune cowsay lolcat\n")),(0,i.kt)("p",null,"Now we should be able to run these programs."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"Singularity> fortune | cowsay | lolcat\nbash: lolcat: command not found\nbash: cowsay: command not found\nbash: fortune: command not found\n")),(0,i.kt)("p",null,"The programs were not added to our ",(0,i.kt)("inlineCode",{parentName:"p"},"$PATH"),". Let's fix that and try again."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"Singularity> find /usr -name cowsay\n/usr/games/cowsay\n\nSingularity> export PATH=$PATH:/usr/games\nSingularity> fortune | cowsay | lolcat\n _______________________________\n< Be careful! Is it classified? >\n -------------------------------\n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n")),(0,i.kt)("p",null,"Note: If you receive warnings from Perl language about locale being incorrect, you can fix them with ",(0,i.kt)("inlineCode",{parentName:"p"},"export LC_ALL=C"),"."),(0,i.kt)("p",null,"Now we can build the final SIF file. For debugging shelling into you Singularity container and amking changes is fine, but in the end you want all these changes to be in your definition file. Keeping the changes in the definition file wil make the container reproducable."),(0,i.kt)("p",null,"Let's update the definition file with the changes we made."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ vim lolcow.def\n")),(0,i.kt)("p",null,"Here is the what the updated definition file should look like:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"BootStrap: debootstrap\nOSVersion: stable\nMirrorURL: http://ftp.us.debian.org/debian/\n\n%runscript\n    fortune | cowsay | lolcat\n\n%post\n    apt-get update\n    apt-get -y install fortune cowsay lolcat\n\n%environment\n    export LC_ALL=C\n    export PATH=$PATH:/usr/games\n")),(0,i.kt)("p",null,"Now we can rebuild the container with the new definition file."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ sudo singularity build lolcow.sif lolcow.def\n")),(0,i.kt)("p",null,"We have ommitted the ",(0,i.kt)("inlineCode",{parentName:"p"},"--sandbox")," option and added the ",(0,i.kt)("em",{parentName:"p"},".sif")," extension to the container. A SIF file is compressed and immutable making it a good choice for a production environment."),(0,i.kt)("p",null,"Now you should be able to run your production container"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ singularity run lolcow.sif\n ______________________________________ \n/ A robin redbreast in a cage Puts all \\\n| Heaven in a rage.                    |\n|                                      |\n\\ -- Blake                             /\n -------------------------------------- \n        \\   ^__^\n         \\  (oo)\\_______\n            (__)\\       )\\/\\\n                ||----w |\n                ||     ||\n")),(0,i.kt)("h4",{id:"moving-containers-to-elja"},"Moving containers to Elja"),(0,i.kt)("p",null,"We have our working container and want to start running it on the HPC cluster. To do this we will have to use SCP"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ scp -i ~/.ssh/<Your private SSH key> /path/to/containers/lolcow.sif <username>@elja.hi.is:~/containers     \n")),(0,i.kt)("p",null,"The container will now be available in your home directory on ",(0,i.kt)("strong",{parentName:"p"},"Elja")," and you can now run it on the compute/gpu nodes with ",(0,i.kt)("strong",{parentName:"p"},"SLURM")),(0,i.kt)("h2",{id:"running-singularity-with-slurm"},"Running singularity with SLURM"),(0,i.kt)("h3",{id:"gpu-example"},"GPU example"),(0,i.kt)("p",null,"First, start an interactive GPU job and then download the Singularity image hello-world.sif:\n",(0,i.kt)("a",{parentName:"p",href:"/docs/elja/interactive_session"},"How to start an interactive job")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'$ srun --job-name "InteractiveGPU" --partition gpu-1xA100 --time 0-01:00 --pty bash\n$ singularity pull --name lolcow.sif library://sylabsed/examples/lolcow_latest\n')),(0,i.kt)("p",null,"To access Nvidia GPU card driver installed inside of Singularity container you need to use --nv option while executing the container. To verify that you have access to the requested GPUs, run nvidia-smi inside the container:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ singularity exec --nv lolcow.sif /bin/bash\nSingularity> nvidia-smi\n +-----------------------------------------------------------------------------+\n| NVIDIA-SMI x96.26 Driver Version: 396.26 |\n|-------------------------------+----------------------+----------------------+\n| GPU Name Persistence-M| Bus-Id Disp.A | Volatile Uncorr. ECC |\n| Fan Temp Perf Pwr:Usage/Cap| Memory-Usage | GPU-Util Compute M. |\n|===============================+======================+======================|\n| 0 Tesla K20Xm Off | 00000000:88:00.0 Off | 0 |\n| N/A 37C P0 61W / 235W | 0MiB / 5700MiB | 65% Default |\n+-------------------------------+----------------------+----------------------+\n")),(0,i.kt)("h3",{id:"singularity-containers-as-slurm-jobs"},"Singularity containers as SLURM jobs"),(0,i.kt)("p",null,"You can use singularity images as a non-interactive batch script as you would any other command. If your image contains a run-script then you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"singularity run"),"\nto execute the run-script in the job. You can also use singularity exec to execute arbritary commands (or scripts) within the image.\nExample:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\n#SBATCH -J singularity_job\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=<Your E-mail> # for example uname@hi.is\n#SBATCH --partition=48cpu_192mem  # request node from a specific partition\n#SBATCH --nodes=2                 # number of nodes\n#SBATCH --ntasks-per-node=48      # 48 cores per node (96 in total)\n#SBATCH --mem-per-cpu=3900        # MB RAM per cpu core\n#SBATCH --time=0-04:00:00         # run for 4 hours maximum (DD-HH:MM:SS)\n#SBATCH --hint=nomultithread      # Suppress multithread\n#SBATCH --output=slurm_job_output.log   \n#SBATCH --error=slurm_job_errors.log   # Logs if job crashes\n\n# Singularity command line options\nsingularity pull library://sylabsed/examples/lolcow:latest\nsingularity run lolcow_latest.sif\n")),(0,i.kt)("p",null,"If the above batch-job script is named singularity_job.sbatch, for instance, the job is submitted as usual with sbatch."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"$ sbatch singularity_job.sbatch\n")))}_.isMDXComponent=!0}}]);