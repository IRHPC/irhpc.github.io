"use strict";(self.webpackChunkhpcdocs=self.webpackChunkhpcdocs||[]).push([[1910],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var p=a.createContext({}),s=function(e){var n=a.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(p.Provider,{value:n},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},h=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=s(t),h=o,m=c["".concat(p,".").concat(h)]||c[h]||u[h]||r;return t?a.createElement(m,l(l({ref:n},d),{},{components:t})):a.createElement(m,l({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=h;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i[c]="string"==typeof e?e:o,l[1]=i;for(var s=2;s<r;s++)l[s]=t[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},410:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>i,toc:()=>s});var a=t(7462),o=(t(7294),t(3905));const r={slug:"AlphaFold"},l="AlphaFold",i={unversionedId:"compiling/AlphaFold",id:"compiling/AlphaFold",title:"AlphaFold",description:"Introduction",source:"@site/docs/compiling/04_AlphaFold.md",sourceDirName:"compiling",slug:"/compiling/AlphaFold",permalink:"/docs/compiling/AlphaFold",draft:!1,editUrl:"https://github.com/irhpc/irhpc.github.io/edit/main/docs/compiling/04_AlphaFold.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{slug:"AlphaFold"},sidebar:"tutorialSidebar",previous:{title:"Programming and Development Environments",permalink:"/docs/compiling/environment"},next:{title:"Jupyterlab on Elja",permalink:"/docs/compiling/jupyterlab"}},p={},s=[{value:"Introduction",id:"introduction",level:2},{value:"Getting started",id:"getting-started",level:2},{value:"Setting up the Conda environment",id:"setting-up-the-conda-environment",level:3},{value:"Load AlphaFold",id:"load-alphafold",level:2},{value:"Run AlphaFold on Elja",id:"run-alphafold-on-elja",level:2},{value:"Starting an interactive session",id:"starting-an-interactive-session",level:3},{value:"Running AlphaFold with SBATCH",id:"running-alphafold-with-sbatch",level:3}],d={toc:s},c="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(c,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"alphafold"},"AlphaFold"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"In short AlphaFold is groundbreaking AI system that is making research faster in the field of bioinformatics. To use AlphaFold the system first takes in a sequence of an amino acid and will then predict three dimensional structure of a protein and does so extremely efficiently."),(0,o.kt)("p",null,"Read more on the AlphaFold official ",(0,o.kt)("a",{parentName:"p",href:"https://www.deepmind.com/research/highlighted-research/alphafold"},"website"),"."),(0,o.kt)("p",null,"This section on AlphaFold will go through how to use AlphaFold on Elja."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"getting-started"},"Getting started"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"Due to ",(0,o.kt)("em",{parentName:"p"},"Nvidia")," compatibility issues ",(0,o.kt)("strong",{parentName:"p"},"Elja")," now requires you to run AlphaFold in a ",(0,o.kt)("a",{parentName:"p",href:"/docs/compiling/rcondapython"},"Conda")," environment.")),(0,o.kt)("h3",{id:"setting-up-the-conda-environment"},"Setting up the Conda environment"),(0,o.kt)("p",null,"We start by initializing the conda environment, these are the same steps as seen in ",(0,o.kt)("a",{parentName:"p",href:"/docs/compiling/rcondapython"},"Conda"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ module use /hpcapps/lib-mimir/modules/all \n$ module load Anaconda3/2022.05\n$ conda config --add channels defaults\n$ conda config --add channels bioconda\n$ conda config --add channels conda-forge\n$ conda config --set auto_activate_base false\n$ conda init\n$ bash # You can also log out and in again.\n")),(0,o.kt)("h2",{id:"load-alphafold"},"Load AlphaFold"),(0,o.kt)("p",null,"Once conda is initialized and ready to use we can load AlphaFold module."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ ml use /hpcapps/libbio-gpu/modules/all\n$ ml load AlphaFold/2.3.1\n")),(0,o.kt)("h2",{id:"run-alphafold-on-elja"},"Run AlphaFold on Elja"),(0,o.kt)("p",null,"To run AlphaFold on Elja you can either run an ",(0,o.kt)("a",{parentName:"p",href:"/docs/elja/interactive_session"},"interactive session")," or run a ",(0,o.kt)("a",{parentName:"p",href:"/docs/elja/submit_jobs"},"batch job"),"."),(0,o.kt)("h3",{id:"starting-an-interactive-session"},"Starting an interactive session"),(0,o.kt)("p",null,"You can start an interactive session with the ",(0,o.kt)("inlineCode",{parentName:"p"},"srun")," command on a ",(0,o.kt)("strong",{parentName:"p"},"GPU")," node. You can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"screen")," command or ",(0,o.kt)("inlineCode",{parentName:"p"},"tmux")," to create a secondary terminal where your interactive session is running in the background.  "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'$ srun --job-name "AlphaFold" --partition gpu-1xA100 --time 01:00:00 --pty bash\n$ conda activate $env_path\n$ run_alphafold.sh -d /AlphaFoldData/AlphaFold/data -o /hpcapps/source/alphafold_non_docker/dummy_test/ -f /hpcapps/source/alphafold_non_docker/example/query.fasta -t 2020-05-14 \n')),(0,o.kt)("h3",{id:"running-alphafold-with-sbatch"},"Running AlphaFold with SBATCH"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"}," cat submit.slurm\n#!/bin/bash\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=<MAIL>         # for example uname@hi.is\n#SBATCH --nodes=1                  # number of nodes\n#SBATCH --partition=gpu-1xA100\n#SBATCH --time=1-00:00:00          # run for 1 day maximum\n#SBATCH --output=slurm_job_output.log\n#SBATCH --error=slurm_job_errors.log   # Logs if job crashes\n\nmodule use /hpcapps/libbio-gpu/modules/all\nmodule load AlphaFold/2.3.1\nconda activate $env_path\n\n# Run the command\n\nrun_alphafold.sh -d /AlphaFoldData/AlphaFold/data -o /hpcapps/source/alphafold_non_docker/dummy_test/ -f /hpcapps/source/alphafold_non_docker/example/query.fasta -t 2020-05-14 \n")))}u.isMDXComponent=!0}}]);