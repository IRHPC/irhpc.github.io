(self.webpackChunkhpcdocs=self.webpackChunkhpcdocs||[]).push([[345],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(n),d=a,b=m["".concat(s,".").concat(d)]||m[d]||c[d]||o;return n?r.createElement(b,i(i({ref:t},p),{},{components:n})):r.createElement(b,i({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var u=2;u<o;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3075:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return i},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i={slug:"submit_jobs"},l={unversionedId:"elja/submit",id:"elja/submit",isDocsHomePage:!1,title:"Submitting Jobs",description:"SLURM",source:"@site/docs/elja/02_submit.md",sourceDirName:"elja",slug:"/elja/submit_jobs",permalink:"/is/docs/elja/submit_jobs",editUrl:"https://github.com/irhpc/irhpc.github.io/edit/main/docs/elja/02_submit.md",version:"current",sidebarPosition:2,frontMatter:{slug:"submit_jobs"},sidebar:"tutorialSidebar",previous:{title:"Bash",permalink:"/is/docs/elja/bash"},next:{title:"Nix",permalink:"/is/docs/elja/nix_start"}},s=[{value:"SLURM",id:"slurm",children:[]},{value:"Batch jobs",id:"batch-jobs",children:[]},{value:"Array jobs",id:"array-jobs",children:[]}],u={toc:s};function p(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"slurm"},"SLURM"),(0,o.kt)("p",null,"Elja uses ",(0,o.kt)("inlineCode",{parentName:"p"},"SLURM")," as the batch scheduler and resource manager.\nBasic common commands are summarized below."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Command"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"sbatch")),(0,o.kt)("td",{parentName:"tr",align:null},"submit a batch job script")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"srun")),(0,o.kt)("td",{parentName:"tr",align:null},"run a parallel job")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"squeue")," (-a, -u \\<uname",">",")"),(0,o.kt)("td",{parentName:"tr",align:null},"show queue status")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"sinfo")),(0,o.kt)("td",{parentName:"tr",align:null},"view info about nodes and partitions")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"scancel")," \\<jobid",">"),(0,o.kt)("td",{parentName:"tr",align:null},"cancel a job")))),(0,o.kt)("h2",{id:"batch-jobs"},"Batch jobs"),(0,o.kt)("p",null,"The command ",(0,o.kt)("inlineCode",{parentName:"p"},"sbatch")," is used to submit jobs to the ",(0,o.kt)("inlineCode",{parentName:"p"},"SLURM")," queue"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"sbatch submit_script\n")),(0,o.kt)("p",null,"A batch submit script usually starts like this"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"#!/bin/bash\n#SBATCH --mail-type=ALL\n#SBATCH --mail-user=<Your E-mail> # for example uname@ugla.is\n#SBATCH --partition=Intel48\n#SBATCH -N 2      # Minimum of 1 node\n#SBATCH -n 96     # 48 MPI processes per node, 96 tasks in total, appropriate for Intel48\n#SBATCH --time=0-04:00:00 # run for 4 hours maximum (1-00:00:00 is equivalent to 1 Day)\n#SBATCH --output=slurm_job_output.log   \n#SBATCH --error=slurm_job_errors.log   # Logs if job crashes\n")),(0,o.kt)("p",null,"Hyper-threading of the intel based CPUs is on by default, hence it is\nis highly recommended to include these commands in your submit (or .bashrc) script\nto suppress the hyper-threading (unless your software supports and is correctly compiled with openmp)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"export omp_num_threads=1\nexport mkl_num_threads=1\n")),(0,o.kt)("p",null,"To cancel a job type"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"scancel <jobid>\n")),(0,o.kt)("p",null,"The IDs of your jobs can be revealed like this"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"squeue -u <uname>\n")),(0,o.kt)("h2",{id:"array-jobs"},"Array jobs"))}p.isMDXComponent=!0}}]);